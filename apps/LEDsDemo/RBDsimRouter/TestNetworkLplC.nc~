/**
 * TestNetworkC exercises the basic networking layers, collection and
 * dissemination. The application samples DemoSensorC at a basic rate
 * and sends packets up a collection tree. The rate is configurable
 * through dissemination. The default send rate is every 10s.
 *
 * See TEP118: Dissemination and TEP 119: Collection for details.
 * 
 * @author Philip Levis
 * @version $Revision: 1.1 $ $Date: 2009-09-16 00:53:47 $
 */

#include <Timer.h>
#include "TestNetwork.h"
#include "CtpDebugMsg.h"


module TestNetworkLplC {
  uses interface Boot;
  uses interface SplitControl as RadioControl;
  uses interface SplitControl as SerialControl;
  uses interface StdControl as CollectionStdControl;
  uses interface StdControl as RoutebackStdControl;
  //uses interface StdControl as DisseminationControl;
  //uses interface DisseminationValue<uint32_t> as DisseminationPeriod;
  uses interface Send as RbdSend;
  uses interface Leds;
  //uses interface Read<uint16_t> as ReadSensor;
  //uses interface Timer<TMilli>;
  uses interface Timer<TMilli> as SendT;
  uses interface Timer<TMilli> as LedsT;
  uses interface RootControl;
  uses interface Receive as CtpReceive;;
  uses interface AMSend as UARTSend;
  uses interface CollectionPacket;
  uses interface CtpInfo;
  uses interface CtpCongestion;
  uses interface Random;
  uses interface Queue<message_t*>;
  uses interface Pool<message_t>;
  uses interface AMPacket;
  uses interface Packet as RadioPacket;
  //uses interface LowPowerListening;
  uses interface RoutebackPacket as Rbdmsg;
  
   
    
    interface StdControl as CollectionStdControl;
    interface StdControl as RoutebackStdControl;
     
    interface Leds;
}
implementation {
  task void uartEchoTask();
  message_t packet;
  message_t uartpacket;
  message_t* recvPtr = &uartpacket;
  uint8_t msglen;
  bool sendBusy = FALSE;
  bool uartbusy = FALSE;
  bool firstTimer = TRUE;
  uint16_t seqno;
  uint8_t i;
  
  typedef nx_struct 
  {
    nx_am_addr_t destinationNodes[8];
    uint8_t next_nodeAdd;
    uint8_t free_index;
  } nodesTable;

  typedef nx_struct {
    nx_uint8_t string[8];
    nx_uint16_t counter;
  } name_t;

  name_t *name;

  enum {
    SEND_INTERVAL = 60*1024U, INVALID_ADD = 0XFFFF
  };

  event void Boot.booted() {
    name = (name_t*)call RbdSend.getPayload (&rbdmsg, sizeof(name_t));
    strcpy ((char*)name->string, "Root");
    name->counter = 0;
    nodesTable.next_nodeAdd = 0;
    nodesTable.free_index = 0;
    for (i=0; i < 8; i++)
      nodesTable.destinationNodes[i]=INVALID_ADD;
    call SerialControl.start();
  }
  
  event void SerialControl.startDone(error_t err) {
    call RadioControl.start();
  }
  
  event void RadioControl.startDone(error_t err) {
    if (err != SUCCESS) {
      call RadioControl.start();
    }
    else {
      //call DisseminationControl.start();
      call CollectionStdControl.start();
      call RootControl.setRoot();
      seqno = 0;
      call Timer.startOneShot(call Random.rand32() % SEND_INTERVAL);
    }
  }

  event void RadioControl.stopDone(error_t err) {}
  event void SerialControl.stopDone(error_t err) {}	

  void failedSend() {
    dbg("App", "%s: Send failed.\n", __FUNCTION__);
    
  }

   
  void sendMessage() {
      destinationAddress=nodesTable.destinationNodes[nodesTable.next_nodeAdd];
      if destinationAddress != INVALID_ADD)
      {
	nodesTable.next_nodeAdd++;
	if (nodesTable.next_nodeAdd == 8)
	  nodesTable.next_nodeAdd == 0;
	  Rbdmsg.setDestination(&rdbmsg,destinationAddress)
	  error = call RbpSend.send(&rbdmsg, sizeof(name_t));
	  if (call Send.send(&rdbmsg, sizeof(name_t)) != SUCCESS) {
	    failedSend();
	    call Leds.led0On();
	    dbg("TestNetworkC", "%s: Transmission failed.\n", __FUNCTION__);
	  }
	  else {
	    sendBusy = TRUE;
	    name->counter ++;
	    seqno++; 
	    dbg("TestNetworkC", "%s: Transmission succeeded.\n", __FUNCTION__);
	  }
      }
  }

 
  event void Timer.fired() {
    uint32_t nextInt;
    call Leds.led0Toggle();
    dbg("TestNetworkC", "TestNetworkC: Timer fired.\n");
    nextInt = call Random.rand32() % SEND_INTERVAL;
    nextInt += SEND_INTERVAL >> 1;
    call Timer.startOneShot(nextInt);
    if (!sendBusy)
	sendMessage();
  }

  event void Send.sendDone(message_t* m, error_t err) {
    if (err != SUCCESS) {
	//      call Leds.led0On();
    }
    sendBusy = FALSE;
    dbg("TestNetworkC", "Send completed.\n");
  }
  
  /*event void DisseminationPeriod.changed() {
    const uint32_t* newVal = call DisseminationPeriod.get();
    call Timer.stop();
    call Timer.startPeriodic(*newVal);
  }*/

  event message_t* 
  CtpReceive.receive(message_t* msg, void* payload, uint8_t len) {
    
    nodesTable.destination[free_index] = call CollectionPacket.getOrigin(msg);
    nodesTable.free_index++;
    if (nodesTable.free_index == 8)
	nodesTable.free_index == 0;  
    dbg("TestNetworkC", "Received packet at %s from node %hhu.\n", sim_time_string(), call CollectionPacket.getOrigin(msg));
    call Leds.led1Toggle();    
    if (!call Pool.empty() && call Queue.size() < call Queue.maxSize()) {
      message_t* tmp = call Pool.get();
      call Queue.enqueue(msg);
      if (!uartbusy) {
        post uartEchoTask();
      }
      return tmp;
    }
    return msg;
 }

 task void uartEchoTask() {
    dbg("Traffic", "Sending packet to UART.\n");
   if (call Queue.empty()) {
     return;
   }
   else if (!uartbusy) {
     message_t* msg = call Queue.dequeue();
     dbg("Traffic", "Sending packet to UART.\n");
     if (call UARTSend.send(0xffff, msg, call RadioPacket.payloadLength(msg)) == SUCCESS) {
       uartbusy = TRUE;
     }
     
   }
 }

  event void UARTSend.sendDone(message_t *msg, error_t error) {
    dbg("Traffic", "UART send done.\n");
    uartbusy = FALSE;
    call Pool.put(msg);
    if (!call Queue.empty()) {
      post uartEchoTask();
    } 
    else {
      //        call CtpCongestion.setClientCongested(FALSE);
    }
  }

}
