/**
 * TestNetworkLplC exercises the basic networking layers, collection and
 * dissemination. The application samples DemoSensorC at a basic rate
 * and sends packets up a collection tree. The rate is configurable
 * through dissemination.
 *
 * See TEP118: Dissemination, TEP 119: Collection, and TEP 123: The
 * Collection Tree Protocol for details.
 * 
 * @author Philip Levis
 * @version $Revision: 1.1 $ $Date: 2009-09-16 00:53:47 $
 */
//#include "TestNetwork.h"
#include "Ctp.h"
#include <demorouter.h>


configuration CollectionRbdRouterAppC {}
implementation {
   enum {CTP_ID = 16, RBD_ID = 17};
  components CollectionRbdRouterC, MainC, LedsC, ActiveMessageC;
  components new RbdSenderC(RBD_ID) as Sender;
  components RoutebackC as Deliver;
  components CollectionC as Collector;
  components new TimerMilliC();
  //components new DemoSensorC();
  //components new SerialAMSenderC(CTP_ID); /** */
  components SerialActiveMessageC;
#ifndef NO_DEBUG
  //components new SerialAMSenderC(AM_COLLECTION_DEBUG) as UARTSender;
  //components UARTDebugSenderP as DebugSender;
#endif
  components PrintfC;
  components RandomC;

  
  CollectionRbdRouterC.DebugPrintf-> Deliver.DebugPrintf;
  //components new QueueC(message_t*, 12);
  
  //components new PoolC(message_t, 12);
  
  components CC2420ActiveMessageC as LplRadio;
  
  CollectionRbdRouterC.LowPowerListening -> LplRadio;


  CollectionRbdRouterC.Boot -> MainC;
  CollectionRbdRouterC.RadioControl -> ActiveMessageC;
  CollectionRbdRouterC.SerialControl -> SerialActiveMessageC;
  CollectionRbdRouterC.CollectionStdControl -> Collector;
  CollectionRbdRouterC.RoutebackStdControl -> Deliver;
  CollectionRbdRouterC.Leds -> LedsC;
  CollectionRbdRouterC.Timer -> TimerMilliC;
  CollectionRbdRouterC.RbdSend -> Sender.RbdSend;
  CollectionRbdRouterC.RootControl -> Collector;
  CollectionRbdRouterC.CtpReceive -> Collector.Receive[CTP_ID];
  //CollectionRbdRouterC.UARTSend -> SerialAMSenderC.AMSend;
  CollectionRbdRouterC.CollectionPacket -> Collector;
  CollectionRbdRouterC.CtpInfo -> Collector;
  CollectionRbdRouterC.CtpCongestion -> Collector;
  CollectionRbdRouterC.Random -> RandomC;
  //CollectionRbdRouterC.Pool -> PoolC;
  //CollectionRbdRouterC.Queue -> QueueC;
  
  components new QueueC(rb_sendqueue*, 10);
  CollectionRbdRouterC.SendQueue -> QueueC;
  
  CollectionRbdRouterC.RadioPacket -> ActiveMessageC;
  CollectionRbdRouterC.Rbdmsg -> Deliver;
  CollectionRbdRouterC.RoutebackTable -> Deliver.RoutebackTable;
  CollectionRbdRouterC.CtpPacket -> Collector.Packet;
  Deliver.CtpPacket -> Collector.CtpPacket;
  
#ifndef NO_DEBUG
  //components new PoolC(message_t, 10) as DebugMessagePool;
  //components new QueueC(message_t*, 10) as DebugSendQueue;
  //DebugSender.Boot -> MainC;
  //DebugSender.UARTSend -> UARTSender;
  //DebugSender.MessagePool -> DebugMessagePool;
  //DebugSender.SendQueue -> DebugSendQueue;

#endif
  CollectionRbdRouterC.AMPacket -> ActiveMessageC;
}
